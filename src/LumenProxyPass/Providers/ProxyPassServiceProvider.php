<?php

namespace CSUNMetaLab\LumenProxyPass\Providers;

use Illuminate\Support\ServiceProvider;

use URL;

class ProxyPassServiceProvider extends ServiceProvider
{
	public function register() {
		if(config('proxypass.proxy_active')) {
            // if we already have a URL forced via the .env file, don't attempt
            // to configure the root URL from the proxy headers
            $url_override = config('proxypass.public_url_override');
            if(empty($url_override)) {
                $this->configureProxiedURLs();
            }

            // force the root URL and the schema based on the configuration
            // values generated by the .env file or the proxy headers
			$this->forceProxiedURLs();
		}
	}

	private function configureProxiedURLs() {
        $urlOverride = "";
        $proxyHeader = config(
        	'proxypass.proxy_path_header', 'HTTP_X_FORWARDED_PATH');
     
        // check the explicit path header (default is 'HTTP_X_FORWARDED_PATH') for rewrite purposes; this
        // header can take both regular subdomain hosting as well as a path within
        // a subdomain into account
        $forwardedPath = (!empty($_SERVER[$proxyHeader]) ? $_SERVER[$proxyHeader] : "");
        if(!empty($forwardedPath)) {
            $urlOverride = $forwardedPath;
        }
     
        // should there also be a schema override for HTTPS?
        $schemaOverride = "";
        if(!empty($_SERVER['SERVER_PORT'])) {
            $schemaOverride = ($_SERVER['SERVER_PORT'] == '443' ? "https" : "");
        }
        if(!empty($urlOverride)) {
            // does the schema of the URL override begin with https?
            if(starts_with($urlOverride, 'https')) {
                // set the schema override explicitly because the URL override
                // in URL::forceRootUrl() does not take schema into account
                $schemaOverride = "https";
            }
        }
        if(!empty($schemaOverride)) {
            config(['proxypass.public_schema_override' => $schemaOverride]);
        }
     
        // if we now have a URL override, set it
        if(!empty($urlOverride)) {
            if($schemaOverride == "https") {
                // override the root URL to include HTTPS as well
                config(['proxypass.public_url_override' =>
                    str_replace('http:', 'https:', $urlOverride)]);
            }
            else
            {
                config(['proxypass.public_url_override' => $urlOverride]);
            }
        }
	}

	private function forceProxiedURLs() {
		// override the public schema if an override exists
        $publicSchema = config("proxypass.public_schema_override");
        if(!empty($publicSchema)) {
            URL::forceSchema($publicSchema);
        }

        // override the public root URL if an override exists
        $publicOverride = config("proxypass.public_url_override");
        if(!empty($publicOverride)) {
            $this->overrideServerValues($publicOverride);
        }
	}

    private function overrideServerValues($url) {
        // strip off the protocol since we have already handled that beforehand
        $url = str_replace("http://", "", $url);
        $url = str_replace("https://", "", $url);

        // now split the URL into an array based on the presence of slashes
        $arr = explode("/", $url);

        // the host override should be the first element
        $host = array_shift($arr);

        // if there is anything left in the array we should re-join it using
        // slashes to form the request URI override
        $requestUri = "";
        if(count($arr) > 0) {
            $requestUri = implode("/", $arr);
        }

        // override the public root domain if an override exists; this is the
        // first portion of what URL::forceRootUrl() does in Laravel but Lumen
        // does not contain this functionality
        if(!empty($host)) {
            $_SERVER['HTTP_HOST'] = $host;
        }

        // override the public request URI if an override exists; this is the
        // second portion of what URL::forceRootUrl() does in Laravel but Lumen
        // does not contain this functionality
        if(!empty($requestUri)) {
            $_SERVER['SCRIPT_NAME'] = "/" . $requestUri . $_SERVER['SCRIPT_NAME'];
            $_SERVER['PHP_SELF'] = "/" . $requestUri . $_SERVER['PHP_SELF'];
            $_SERVER['REQUEST_URI'] = "/" . $requestUri . $_SERVER['REQUEST_URI'];
        }

        // the three overrides above combine to form a root URL with the following format:
        // [protocol]://[domain]/[request uri]/
    }
}